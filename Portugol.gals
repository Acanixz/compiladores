#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = GALS
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = SLR
#RegularDefinitions

#Tokens
// PALAVRAS RESERVADAS
// 1. Declaração de tipos
INT: "inteiro"

// 2. Estruturas de controle condicionais
se: "se"
entao: "entao"
senao: "senao"
fimse: "fimse"

// 3. Laços de repetição
enquanto: "enquanto"
fim_enquanto: "fimenquanto"
para: "para"
fimpara: "fimpara"
ATE: "ate"
passo: "passo"
faca: "faca"

// 4. Entrada / Saida
leia: "leia"
escreva: "escreva"

// 5. Operadores Lógicos
AND: "AND"
OR: "OR"
NOT: "NOT"

// LITERAIS
NUM_INT: 0[bB][01]+ | 0[xX][0-9a-fA-F]+ | [0-9]+

// IDENTIFICADOR
ID: [a-zA-Z_]?[a-zA-Z0-9_]*[a-zA-Z0-9]

// SIMBOLOS ESPECIAIS
// 1. Operadires Aritméticos
"+"
"-"

// 2. Operador de Atribuição
"<-"

// 3. Delimitadores
"," // Itens
"[" // Vetor (abre)
"]" // Vetor (fecha)
"(" // Funções e precedência (abre)
")" // Funções e precedência (fecha)

// 4. Operadores Relacionais
">"
"<"
">="
"<="
"!="
"=="

// 5. Operadores bit-a-bit
"&" // AND
"^" // OR Exclusivo
"|" // OR Inclusivo

// IGNORES
// Espaço, Whiteline
:[\ \n\t]
#NonTerminals
<prog>
<lista_dec>
<dec>
<tipo>
<lista_id>
<id>
<lista_cmd>
<cmd>
<r_senao>
<exp>
<exp1>
<exp2>
<exp3>
#Grammar
// Inicio
<prog> ::= <lista_dec><lista_cmd>;
  <lista_dec> ::= <lista_dec> <dec> | <dec>;
  <dec> ::= <tipo> <lista_id>;
  <tipo> ::= INT;
  <lista_id> ::= <id> #3 "," <lista_id>| <id> #3;
  <id> ::= ID #1 | ID #1 "<-" NUM_INT #2 | ID #1 "[" NUM_INT #30 "]";
  
// Comandos
  <lista_cmd> ::= <lista_cmd> <cmd> | <cmd>;
 <cmd> ::= ID #21  "<-"  <exp2> #22
 | ID #21  "[" <exp2> "]" "<-" <exp2> #22
 | se <exp> entao <lista_cmd> <r_senao> fimse
 | enquanto <exp> faca <lista_cmd> fim_enquanto
 | para ID "<-" <exp2> ATE <exp2> passo NUM_INT <lista_cmd> fimpara
 | leia "(" ID #7 ")"
 | leia "(" ID #7 "[" <exp2> "]" ")"
 | escreva "(" <exp3> #9 ")";

// Senão da condição se (opcional)
<r_senao> ::= senao <lista_cmd> | î;

// Expressões lógicas
<exp> ::= <exp> AND <exp1>
        | <exp> OR <exp1>
        | NOT <exp1>
        | <exp1>;

// Expressões relacionais
<exp1> ::= <exp1> ">" <exp2>
         | <exp1> "<" <exp2>
         | <exp1> ">=" <exp2>
         | <exp1> "<=" <exp2>
         | <exp1> "!=" <exp2>
         | <exp1> "==" <exp2>
         | <exp2>;
  
// Expressões aritméticas e bit-a-bit
<exp2> ::= <exp2> "+" #4 <exp3>
         | <exp2> "-" #4 <exp3>
         | <exp2> "&" #4 <exp3>
         | <exp2> "^" #4 <exp3>
         | <exp2> "|" #4 <exp3>
         | <exp3>;

// Termos (fatores)
<exp3> ::= ID #5 | NUM_INT #6 | ID "[" <exp2> "]";

