#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = String
Parser = SLR
#RegularDefinitions

#Tokens
// Comentários:
// - MULTI_LINE_COMMENT com conflito com os Operadores Aritméticos
// - Declaração para o vetor na gramática (declaracao_vetor e proximas 2 linhas) não parece funcionar corretamente no Web GALS, algum bug com os simbolos GREATER and LESS quando fecham

// COMENTÁRIOS
MULTI_LINE_COMMENT: /\*([^\*]|[\r\n]|(\*+([^\*/]|[\r\n])))*\*/
ONE_LINE_COMMENT: [/][/][^\n]*

// PALAVRAS RESERVADAS
// Não podem ser usadas p/ variaveis
VECTOR_KEYWORD: "vector"
BOOL_KEYWORD: "bool"
VOID_KEYWORD: "void" # Nota: Não usado em literais
INT_KEYWORD: "int"
FLOAT_KEYWORD: "float"
DOUBLE_KEYWORD: "double" # Nota: Não usado em literais
CHAR_KEYWORD: "char"
STRING_KEYWORD: "string"
IF_KEYWORD: "if"
ELSE_KEYWORD: "else"
WHILE_KEYWORD: "while"
FOR_KEYWORD: "for"
RETURN_KEYWORD: "return"
COUT_KEYWORD: "cout"

// LITERAIS
// O tipo de dado, definido pelas regras
INT_LITERAL: 0[bB][01]+ | 0[xX][0-9a-fA-F]+ | [0-9]+
FLOAT_LITERAL: [0-9]+\.[0-9]* | \.[0-9]+[fF]?
CHAR_LITERAL: '([^'\\]|\\[\\'\"tnr])'
STRING_LITERAL: \"([^\"\\]|\\.)*\\?\"
BOOL_LITERAL: true | false
NULL_LITERAL: nullptr

// OPERADORES ARITMÉTICOS
PLUS: "+"
MINUS: "-"
TIMES: "*"
DIVIDE: /
MODULO: %
INCREMENT: "++"
DECREMENT: "--"

// ATRIBUIÇÃO
EQUAL: =

// OPERADORES RELACIONAIS E ATRIBUIÇÃO
EQUALS: ==
NOT_EQUALS: !=
GREATER: >
LESS: <
GREATER_OR_EQUALS: >=
LESS_OR_EQUALS: <=

// OPERADORES LÓGICOS
LOGICAL_AND: &&
LOGICAL_OR: "||"
LOGICAL_NOT: !

// OPERADORES BIT A BIT
BITWISE_AND: &
BITWISE_OR: "|"
BITWISE_XOR: "^"
BITWISE_NOT: ~
LEFT_SHIFT: <<
RIGHT_SHIFT: >>

// IDENTIFICADOR
IDENTIFIER: [a-zA-Z_][a-zA-Z0-9_]*[a-zA-Z0-9]

// DELIMITADORES E PONTUADORES
DOT: "."
SEMICOLON: ;
COLON: :
COMMA: ,
LEFT_PARENTHESIS: "("
RIGHT_PARENTHESIS: ")"
LEFT_BRACKET: "["
RIGHT_BRACKET: "]"
LEFT_BRACE: "{"
RIGHT_BRACE: "}"

// Ignore
// Espaço, Whiteline
:[\ \n]
#NonTerminals
<lista_comandos>
<keyword_tipo>
<keyword_literal>
<exp>
<exp1>
<exp2>
<exp3>
<exp4>
<exp5>
<exp6>
<exp7>
<exp8>
<exp9>
<exp10>
<op_rel>
<op_neg>
<op_bitwise>
<op_arit_baixa>
<op_arit_alta>
<lista_comandos_escopo>
<comando>
<declaracao_variavel>
<declaracao_var_id>
<declaracao_var_value>
<chamada_cout>
<cout1>
<cout2>
#Grammar
<keyword_tipo> ::= BOOL_KEYWORD | INT_KEYWORD | FLOAT_KEYWORD | DOUBLE_KEYWORD | CHAR_KEYWORD | STRING_KEYWORD;
<keyword_literal> ::= BOOL_LITERAL | INT_LITERAL | FLOAT_LITERAL| CHAR_LITERAL | STRING_LITERAL;

<exp>  ::= <exp> LOGICAL_OR <exp1> | <exp1>;
<exp1> ::= <exp1> LOGICAL_AND <exp2> | <exp2>;
<exp2> ::= <exp2> BITWISE_OR <exp3> | <exp3>;
<exp3> ::= <exp3> BITWISE_XOR <exp4> | <exp4>;
<exp4> ::= <exp4> BITWISE_AND <exp5> | <exp5>;
<exp5> ::= <exp5> <op_rel> <exp6> | <exp6>;
<exp6> ::= <exp6> <op_bitwise> <exp7> | <exp7>;
<exp7> ::= <exp7> <op_arit_baixa> <exp8> | <exp8>;
<exp8> ::= <exp8> <op_arit_alta> <exp9> | <exp9> ;
<exp9> ::= <op_neg> <exp10> | <exp10>;
<exp10> ::= INT_LITERAL | FLOAT_LITERAL | IDENTIFIER | LEFT_PARENTHESIS <exp> RIGHT_PARENTHESIS;

<op_rel> ::= GREATER | LESS | GREATER_OR_EQUALS | LESS_OR_EQUALS | EQUALS | NOT_EQUALS; 
<op_neg> ::= MINUS | BITWISE_NOT | LOGICAL_NOT;
<op_bitwise> ::= LEFT_SHIFT | RIGHT_SHIFT;
<op_arit_baixa> ::= PLUS | MINUS;
<op_arit_alta> ::= TIMES | DIVIDE | MODULO;


<lista_comandos> ::= <lista_comandos><comando> | <comando> | <lista_comandos_escopo>;
<lista_comandos_escopo> ::= LEFT_BRACE <comando> RIGHT_BRACE | LEFT_BRACE <lista_comandos><comando> RIGHT_BRACE;

<comando> ::= <declaracao_variavel> | <chamada_cout>;


<declaracao_variavel> ::= <keyword_tipo> <declaracao_var_id> EQUAL <declaracao_var_value> SEMICOLON;
<declaracao_var_id> ::= IDENTIFIER | IDENTIFIER COMMA <declaracao_var_id>;
<declaracao_var_value> ::= <exp> | <exp> COMMA <declaracao_var_value>;


<chamada_cout> ::= COUT_KEYWORD LEFT_SHIFT <cout1> SEMICOLON;
<cout1> ::= <cout2> | <cout2> LEFT_SHIFT <cout1>;
<cout2> ::= <exp> | <keyword_literal>;