#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
Package = GALS
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = SLR
#RegularDefinitions

#Tokens
// COMENTÁRIOS
MULTI_LINE_COMMENT: /\*([^\*]|[\r\n]|(\*+([^\*/]|[\r\n])))*\*/
ONE_LINE_COMMENT: [/][/][^\n]*

// PALAVRAS RESERVADAS
// Não podem ser usadas p/ variaveis
BOOL_KEYWORD: "bool"
VOID_KEYWORD: "void" // Nota: Não usado em literais
INT_KEYWORD: "int"
FLOAT_KEYWORD: "float"
DOUBLE_KEYWORD: "double" // Nota: Não usado em literais
CHAR_KEYWORD: "char"
STRING_KEYWORD: "string"
IF_KEYWORD: "if"
ELSE_KEYWORD: "else"
SWITCH_KEYWORD: "switch"
CASE_KEYWORD: "case"
BREAK_KEYWORD: "break"
DEFAULT_KEYWORD: "default"
DO_KEYWORD: "do"
WHILE_KEYWORD: "while"
FOR_KEYWORD: "for"
RETURN_KEYWORD: "return"
CIN_KEYWORD: "cin"
COUT_KEYWORD: "cout"

STATIC_KEYWORD: "static"
CONST_KEYWORD: "const"
NEW_KEYWORD: "new"

// COMANDOS UTILITÁRIOS
ENDL_KEYWORD: "endl"
RETURN_KEYWORD: "return"

// LITERAIS
// O tipo de dado, definido pelas regras
INT_LITERAL: 0[bB][01]+ | 0[xX][0-9a-fA-F]+ | [0-9]+
FLOAT_LITERAL: [0-9]+\.[0-9]* | \.[0-9]+[fF]?
CHAR_LITERAL: '([^'\\]|\\[\\'\"tnr])'
STRING_LITERAL: \"([^\"\\]|\\.)*\\?\"
BOOL_LITERAL: true | false
NULL_LITERAL: nullptr

// OPERADORES ARITMÉTICOS
PLUS: "+"
MINUS: "-"
TIMES: "*"
DIVIDE: /
MODULO: %
INCREMENT: "++"
DECREMENT: "--"

// ATRIBUIÇÃO
EQUAL: =

// OPERADORES RELACIONAIS
EQUALS: ==
NOT_EQUALS: !=
GREATER: >
LESS: <
GREATER_OR_EQUALS: >=
LESS_OR_EQUALS: <=

// OPERADORES LÓGICOS
LOGICAL_AND: &&
LOGICAL_OR: "||"
LOGICAL_NOT: !

// OPERADORES BIT A BIT
BITWISE_AND: &
BITWISE_OR: "|"
BITWISE_XOR: "^"
BITWISE_NOT: ~
LEFT_SHIFT: <<
RIGHT_SHIFT: >>

// IDENTIFICADOR
IDENTIFIER: [a-zA-Z_]?[a-zA-Z0-9_]*[a-zA-Z0-9]

// DELIMITADORES E PONTUADORES
DOT: "."
SEMICOLON: ;
COLON: :
COMMA: ,
LEFT_PARENTHESIS: "("
RIGHT_PARENTHESIS: ")"
LEFT_BRACKET: "["
RIGHT_BRACKET: "]"
LEFT_BRACE: "{"
RIGHT_BRACE: "}"

// Ignore
// Espaço, Whiteline
:[\ \n\t]
#NonTerminals
<inicio>
<lista_comandos>
<lista_comandos_escopo>
<quantidade_comandos>
<atributo_definicao>
<ponteiro>
<vazio_exp>
<lista_exps>
<lista_vetor>
<escopo_vetor>
<tipo_vetor>
<comando>
<tipo_keyword>
<tipo_literal>
<exp>
<exp1>
<exp2>
<exp3>
<exp4>
<exp5>
<exp6>
<exp7>
<exp8>
<exp9>
<exp10>
<op_rel>
<op_neg>
<op_bitwise>
<op_arit_baixa>
<op_arit_alta>
<chamada_vetor>
<vazio_vetor>
<declaracao_variavel>
<lista_ids>
<tipo_variavel>
<definicao_valor_variavel>
<definicao_valor_vetor>
<valor_escopo_vetor>
<new_exps>
<chamada_new>
<declaracao_funcao>
<quantidade_parametros>
<lista_parametros>
<parametro>
<lista_vetores>
<escopo_vetor_vazio>
<chamada_funcao>
<quantidade_argumentos>
<chamada_while>
<chamada_for>
<parametro_1>
<parametro_2>
<parametro_3>
<increment_decrement>
<definicao_tipo_numero>
<definicao_valor_parametro>
<chamada_do_while>
<chamada_if>
<chamada_else_if>
<chamada_else>
<else>
<chamada_switch>
<lista_comandos_switch>
<lista_comandos_escopo_switch>
<quantidade_comandos_switch>
<comando_switch>
<chamada_case>
<chamada_default>
<chamada_break>
<chamada_cin>
<chamada_cout>
<lista_elementos>
<elemento>
<atribuicao>
<chamada_return>
#Grammar
// ==================== ESTRUTURA PRINCIPAL ====================
<inicio> ::= <lista_comandos> | <lista_comandos_escopo>;
<lista_comandos> ::= <comando> | <comando> <lista_comandos>;
<lista_comandos_escopo> ::= LEFT_BRACE #67 <quantidade_comandos> RIGHT_BRACE #68;
<quantidade_comandos> ::= î | <lista_comandos>;

// ====================== COMANDOS GERAIS ======================
<atributo_definicao> ::= î | STATIC_KEYWORD #13 | CONST_KEYWORD #13;
<ponteiro> ::= î | TIMES #14 | BITWISE_AND #14;

<vazio_exp> ::= î | <exp>;
<lista_exps> ::= <exp> | <exp> COMMA <lista_exps>;

<lista_vetor> ::= <escopo_vetor> | <escopo_vetor> <lista_vetor>;
<escopo_vetor> ::= LEFT_BRACKET <exp> RIGHT_BRACKET;
<tipo_vetor> ::= î | <escopo_vetor>;

// ========================== COMANDOS =========================
<comando> ::= <declaracao_variavel>
            | <declaracao_funcao>
            | <chamada_while>
            | <chamada_for>
            | <chamada_do_while>
            | <chamada_if>
            | <chamada_switch>
            | <chamada_cin>
            | <chamada_cout>
            | <chamada_funcao> SEMICOLON
            | <chamada_new>
            | <chamada_return>
            | <atribuicao>;

// ======================= TIPOS E DADOS =======================
<tipo_keyword> ::= BOOL_KEYWORD #1 | INT_KEYWORD #1 | FLOAT_KEYWORD #1
                 | DOUBLE_KEYWORD #1 | CHAR_KEYWORD #1 | STRING_KEYWORD #1;
                 
<tipo_literal> ::= BOOL_LITERAL #2 | INT_LITERAL #2 | FLOAT_LITERAL #2
                 | CHAR_LITERAL #2 | STRING_LITERAL #2;

// ========================= EXPRESSÕES ========================
<exp>  ::= <exp> LOGICAL_OR #7 <exp1> #70 | <exp1>;
<exp1> ::= <exp1> LOGICAL_AND #7 <exp2> #70 | <exp2>;
<exp2> ::= <exp2> BITWISE_OR #7 <exp3> #70 | <exp3>;
<exp3> ::= <exp3> BITWISE_XOR #7 <exp4> #70 | <exp4>;
<exp4> ::= <exp4> BITWISE_AND #7 <exp5> #70 | <exp5>;
<exp5> ::= <exp5> <op_rel> <exp6> #70 | <exp6>;
<exp6> ::= <exp6> <op_bitwise> <exp7> #70 | <exp7>;
<exp7> ::= <exp7> <op_arit_baixa> <exp8> #70 | <exp8>;
<exp8> ::= <exp8> <op_arit_alta> <exp9> #70 | <exp9> ;
<exp9> ::= <op_neg> <exp10> #71 | <exp10>;
<exp10> ::= <tipo_literal> 
          | <chamada_vetor>
          | <chamada_funcao> 
          | IDENTIFIER #64
          | LEFT_PARENTHESIS #65 <exp> RIGHT_PARENTHESIS #66;

// ========================= OPERADORES ========================
<op_rel> ::= GREATER #7 | LESS #7 | GREATER_OR_EQUALS #7 | LESS_OR_EQUALS #7 | EQUALS #7 | NOT_EQUALS #7; 
<op_neg> ::= MINUS #8 | BITWISE_NOT #9 | LOGICAL_NOT #9;
<op_bitwise> ::= LEFT_SHIFT #10 | RIGHT_SHIFT #10;
<op_arit_baixa> ::= PLUS #3 | MINUS #3;
<op_arit_alta> ::= TIMES #4 | DIVIDE #5 | MODULO #6;

// ========================= VARIÁVEIS =========================
<chamada_vetor> ::= IDENTIFIER #11 <lista_vetor>;
<vazio_vetor> ::= IDENTIFIER #12 LEFT_BRACKET RIGHT_BRACKET | IDENTIFIER #12 <lista_vetor>;

<declaracao_variavel> ::= <atributo_definicao> <tipo_keyword> <ponteiro> <lista_ids> SEMICOLON;

<lista_ids> ::= <tipo_variavel> | <tipo_variavel> COMMA <lista_ids>;

<tipo_variavel> ::= IDENTIFIER #15 <definicao_valor_variavel> | <vazio_vetor> <definicao_valor_vetor>;
<definicao_valor_variavel> ::= î | EQUAL <new_exps>;
<definicao_valor_vetor> ::= î | EQUAL <escopo_vetor>;

<escopo_vetor> ::= LEFT_BRACE #16 <valor_escopo_vetor> RIGHT_BRACE #17;
<valor_escopo_vetor> ::= LEFT_BRACE #18 <lista_exps> RIGHT_BRACE #19 | LEFT_BRACE #18 <lista_exps> RIGHT_BRACE #19 COMMA <valor_escopo_vetor> | <escopo_vetor>;

<new_exps> ::= <chamada_new> | <exp> #69;
<chamada_new> ::= NEW_KEYWORD #20 <tipo_keyword> #69 <tipo_vetor>;

// ========================== FUNÇÕES ==========================
<declaracao_funcao> ::= <atributo_definicao> <tipo_keyword> <ponteiro> IDENTIFIER #21 LEFT_PARENTHESIS #22 <quantidade_parametros> RIGHT_PARENTHESIS #23 <lista_comandos_escopo>
                      | <atributo_definicao>  VOID_KEYWORD #1 <ponteiro> IDENTIFIER #21 LEFT_PARENTHESIS #22 <quantidade_parametros> RIGHT_PARENTHESIS #23 <lista_comandos_escopo>;

<quantidade_parametros> ::= î | <lista_parametros>;
<lista_parametros> ::= <parametro> | <parametro> COMMA <lista_parametros>;
<parametro> ::= <tipo_keyword> <ponteiro> IDENTIFIER #24
              | <tipo_keyword> <ponteiro> IDENTIFIER #25 <lista_vetores>;
<lista_vetores> ::= <escopo_vetor_vazio> | <escopo_vetor_vazio> <lista_vetores>;
<escopo_vetor_vazio> ::= LEFT_BRACKET <vazio_exp> RIGHT_BRACKET;

<chamada_funcao> ::= IDENTIFIER #26 LEFT_PARENTHESIS #27 <quantidade_argumentos> RIGHT_PARENTHESIS #28;
<quantidade_argumentos> ::= î | <lista_exps>;

// ===================== LAÇOS DE REPITIÇÃO ====================
// Pré-testado
<chamada_while> ::= WHILE_KEYWORD #29 LEFT_PARENTHESIS #30 <exp> RIGHT_PARENTHESIS #31 <lista_comandos_escopo>;

// Pré-testado com variáveis de controle [inicialização e pós-operação]
<chamada_for> ::= FOR_KEYWORD #32 LEFT_PARENTHESIS #33 <parametro_1> SEMICOLON <parametro_2> SEMICOLON <parametro_3> RIGHT_PARENTHESIS #34 <lista_comandos_escopo>;
<parametro_1> ::= î | <tipo_literal> | <tipo_keyword> IDENTIFIER #35 <definicao_valor_parametro>;
<parametro_2> ::= <vazio_exp>;
<parametro_3> ::= <parametro_2> | IDENTIFIER #36 <increment_decrement>;
<increment_decrement> ::= INCREMENT #37 | DECREMENT #37;
<definicao_tipo_numero> ::= BOOL_LITERAL | INT_LITERAL | FLOAT_LITERAL; // NÃO UTILIZADO
<definicao_valor_parametro> ::= î | EQUAL <tipo_literal>;

// Pós-testado
<chamada_do_while> ::= DO_KEYWORD #38 <lista_comandos_escopo> WHILE_KEYWORD #39 LEFT_PARENTHESIS #40 <exp> RIGHT_PARENTHESIS #41 SEMICOLON;

// ===================== CONTROLE DE FLUXO =====================
// IF
<chamada_if> ::= IF_KEYWORD #42 LEFT_PARENTHESIS #43 <exp> RIGHT_PARENTHESIS #44 <lista_comandos_escopo> <else>;
<chamada_else_if> ::= ELSE_KEYWORD #45 IF_KEYWORD #46 LEFT_PARENTHESIS #47 <exp> RIGHT_PARENTHESIS #48 <lista_comandos_escopo> <else>;
<chamada_else> ::= ELSE_KEYWORD #49 <lista_comandos_escopo>;
<else> ::= î | <chamada_else_if> | <chamada_else>;

// SWITCH
<chamada_switch> ::= SWITCH_KEYWORD #50 LEFT_PARENTHESIS #51 <exp> RIGHT_PARENTHESIS #52 <lista_comandos_escopo_switch>;

<lista_comandos_switch> ::= <comando_switch> | <comando_switch> <lista_comandos_switch>;
<lista_comandos_escopo_switch> ::= LEFT_BRACE #53 <quantidade_comandos_switch> RIGHT_BRACE #54;
<quantidade_comandos_switch> ::= î | <lista_comandos_switch>;

<comando_switch> ::= <comando> 
                   | <chamada_case>
                   | <chamada_default>
                   | <chamada_break>;

<chamada_case> ::= CASE_KEYWORD #55 <exp> COLON;

<chamada_default> ::= DEFAULT_KEYWORD #56 COLON;

<chamada_break> ::= BREAK_KEYWORD #57 SEMICOLON;

// ============================ I/O ============================
<chamada_cin> ::= CIN_KEYWORD #58 RIGHT_SHIFT IDENTIFIER #59 <tipo_vetor> SEMICOLON;

<chamada_cout> ::= COUT_KEYWORD #60 LEFT_SHIFT <lista_elementos> SEMICOLON;
<lista_elementos> ::= <elemento> | <elemento> LEFT_SHIFT <lista_elementos>;
<elemento> ::= <exp7> | ENDL_KEYWORD #61;

// ==================== ATRIBUIÇÃO E RETORNO ===================
<atribuicao> ::= IDENTIFIER #62 <tipo_vetor> EQUAL <exp> #69 SEMICOLON;

<chamada_return> ::= RETURN_KEYWORD #63 <vazio_exp> SEMICOLON;